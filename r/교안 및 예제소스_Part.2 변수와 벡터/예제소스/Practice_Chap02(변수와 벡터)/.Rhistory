2+3
(3+6)*10
(3+6)*10
2^2
log(10)+5  #로그함수
sqrt(100)  #제곱근
max(10,5,7,-8,1000)
min(10,5,7,-8,1000)  #최대값을 구함
a <- 10
b <- 20
a + b
c <- a + b
c
print(c)
a <- "a"
a + b
c <- a + b
b <- "b"
a + b
10%3
10%%3
10/3
c <- TRUE
c
c
c <- F
c
d <- NULL
d <- NULL
d
sqrt(-10)
# 벡터의 연산
d <- c(1,10,5,3)
# 벡터의 연산
d <- c(1,10,5,3)
# 벡터의 연산
d <- c(1,10,5,3)
y <- c("a","b","c")               # 문자형 벡터
z <- c(TRUE,T, F, TRUE)           # 논리형 벡터
x                                 # x에 저장된 값을 출력
y
# 벡터의 이해
x <- c(1,2,3)                     # 숫자형 벡터
y <- c("a","b","c")               # 문자형 벡터
z <- c(TRUE,T, F, TRUE)           # 논리형 벡터
x                                 # x에 저장된 값을 출력
y
z
w <- c(1,2,3, "a","b","c")
w
v1 <- 50:90
v1
v2 <- c(1,2,5, 50:90)
v2
v3 <- seq(1,101,3)
v5 <- rep(1,times=5)           # 1을 5번 반복
v6 <- rep(1:5,times=3)         # 1에서 5까지 3번 반복
score <- c(90,85,70)                    # 성적
score
names(score)                            # score에 저장된 값들의 이름을 보이시오
names(score) <- c("John","Tom","Jane")  # 값들에 이름을 부여
score <- c(90,85,70)                    # 성적
names(score) <- c("John","Tom","Jane")  # 값들에 이름을 부여
names(score)                            # score에 저장된 값들의 이름을 보이시오
score                                   # 이름과 함께 값이 출력
# 벡터의 연산
d <- c(1,10,5,3)
# 벡터의 산술연산
2*d  # 각요소에다가 2를 곱해라
d-5
3*d+4
# 벡터의 함수를 이용
d <- c(1:10)
d
# 벡터요소의 합
sum(d)
sum(3*d)
# 벡터요소의 길이(개수)
length(d)
# 벡터요소의 평균
mean(d[1:5])
# 최대값
max(d)
# 최소값
min(d)
# 정렬(기본적으로 오름차순정렬)
sort(d)
sort(x = d,decreasing = TRUE)
sort(d, T)
# 중앙값구하기
v1 <- median(d)
v2 <- sum(d)/length(d)
# 벡터의 논리 연산
d <- c(1:9)
d
d >= 5   # 논리값 출력
d[d>=5]  # 실제값을 출력
sum(d[d>5]) # 5초과의 합계를 출력
condi <- (d > 5) & (d < 8)
condi
d[condi]
# 정렬(기본적으로 오름차순정렬)
sort(d)
sort(x = d,decreasing = TRUE)
sort(d, T)
d >= 5   # 논리값 출력
d[d>=5]  # 실제값을 출력
condi <- (d > 5) & (d < 8)
condi
d[condi]
# 팩터(factor)
bt <- c("A", "B", "B", "O", "AB", "A")
bt
bt.new
bt
fbt <- factor(bt)
bt
fbt
bt[5]
fbt[5]
bt[5]
fbt[5]
# levels()는 팩터에 저장된 데이터의 종류를 알려준다.
levels(fbt)
as.integer(fbt)
as.integer(fbt)
