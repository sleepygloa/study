

	var step = 0;

    var scene = new THREE.Scene();
    var camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, 0.1, 3000);
    var renderer = new THREE.WebGLRenderer( { antialias: true, preserveDrawingBuffer: true } );
    renderer.setClearColor(0xEEEEEE);
    renderer.setSize(window.innerWidth, window.innerHeight);
    //Show Axis
    var axes = new THREE.AxisHelper(50);
    scene.add(axes);
    //Let's make a plane
    var planeGeometry = new THREE.PlaneGeometry(50,50,1,1);
    var planeMaterial = new THREE.MeshBasicMaterial({color: 0xCCCCCC});
    var plane = new THREE.Mesh(planeGeometry, planeMaterial);
    plane.rotation.x = -0.5 * Math.PI;
    scene.add(plane);

    document.body.appendChild(renderer.domElement);

	// 카메라의 위치 조정
	camera.position.set ( 50, 50, 70 );
	camera.lookAt(0, 0, 0);
	// camera.rotation.set ( -35 * ( Math.PI / 180 ), 35 * ( Math.PI / 180 ), 0 );

	// 카메라가 회전하는
	var controls = new THREE.OrbitControls (camera, renderer.domElement);
	controls.update();


/*
	// 카메라와 마우스 상호작용을 위해 OrbitControls를 설정합니다.
	var controls = new THREE.OrbitControls(camera);
	controls.rotateSpeed = 1.0; // 마우스로 카메라를 회전시킬 속도입니다. 기본값(Float)은 1입니다.
	controls.zoomSpeed = 1.2; // 마우스 휠로 카메라를 줌 시키는 속도 입니다. 기본값(Float)은 1입니다.
	controls.panSpeed = 0.8; // 패닝 속도 입니다. 기본값(Float)은 1입니다.
	controls.minDistance = 5; // 마우스 휠로 카메라 거리 조작시 최소 값. 기본값(Float)은 0 입니다.
	controls.maxDistance = 1000; // 마우스 휠로 카메라 거리 조작시 최대 값. 기본값(Float)은 무제한 입니다.
*/




	var dd = [
		[[1,1],[1,1],[1,1],[1,1],[1,1]],
		[[1,1],[0,0],[1,1],[0,0],[1,1]],
		[[1,1],[0,1],[1,0],[1,0],[1,1]]
	];

	for( var i = 0 ; i < dd.length; i++){

		for(var j = 0; j < dd[i].length; j++){

			for(var z = 0; z < dd[i][j].length; z++){



				//Let's make a cube  
				var cubeGeometry = new THREE.BoxGeometry(j,i,6);  
				var cubeMeterial = new THREE.MeshBasicMaterial({color: 0x0089A0});  
				var cube = new THREE.Mesh(cubeGeometry, cubeMeterial);  
				cube.position.x = (j - dd[i].length / 2) * 5;  
				cube.position.y = (z == 0 ? 1 : 4);
				cube.position.z = (i - dd[i].length / 2) * 10;  
				scene.add(cube);
			}
		}
	}



	var framesPerSecond=60;

	// 에니메이션 효과를 자동으로 주기 위한 보조 기능입니다.
	var animate = function () {
		// 프레임 처리
		setTimeout(function() {
			 requestAnimationFrame(animate); 
		}, 1000 / framesPerSecond);

		// 랜더링을 수행합니다.
		renderer.render( scene, camera );
	};

	// animate()함수를 최초에 한번은 수행해주어야 합니다.
	animate();


// 렌더러 정의 및 크기 지정, 문서에 추가하기
var renderer = new THREE.WebGLRenderer( { antialias: true, preserveDrawingBuffer: true } );
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );
renderer.shadowMap.enabled = true;
renderer.shadowMap.type = THREE.PCFShadowMap;		// <-- 속도가 빠르다
renderer.gammaInput = true;
renderer.gammaOutput = true;
