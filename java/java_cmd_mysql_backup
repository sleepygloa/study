public class MySqlBackUp { private static Logger logger = Logger.getLogger(MySqlBackUp.class); private String ID; private String PW; private String DB_NAME; public String getID() { return ID; } public void setID(String iD) { ID = iD; } public String getPW() { return PW; } public void setPW(String pW) { PW = pW; } public String getDB_NAME() { return DB_NAME; } public void setDB_NAME(String dB_NAME) { DB_NAME = dB_NAME; } /** * Mysql DB 백업 * @param path * @return */ public int DBbackUpExec(String path) { int result = 0; // 명령어 설정 StringBuffer cmd = new StringBuffer(); cmd.append("mysqldump").append(" -u").append(ID).append(" -p").append(PW).append(" ") .append(DB_NAME).append(" ")//cmd.append(TABLE_NAME); .append(" -r") .append(path); try { Process pross = Runtime.getRuntime().exec(cmd.toString()); if (pross.waitFor() == 0) { result = 1; // logger.info("백업 성공"); } else { result = 0; // logger.info("백업 실패"); } } catch (IOException ioe) { ioe.printStackTrace(); } catch (Exception e) { e.printStackTrace(); } return result; } /** * Mysql DB 복구 * @param fileName */ public int DBreStoreExec(String fileName) { int result = 0; String cmd[] = { "mysql", DB_NAME, "-u" + ID, "-p" + PW, "-e", "source " + fileName }; Process pross = null; try { Runtime run = Runtime.getRuntime(); pross = run.exec(cmd); if (pross.waitFor() == 0) { //logger.info("복구성공"); result = 1; } else { //logger.info("복구실패"); result = 0; } } catch (Exception e) { e.printStackTrace(); } return result; } }



