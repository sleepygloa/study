JSP

				<div class="form-group col-md-p20 p-0">
					<form id="assetManagerUploadExcelForm" name="UploadExcelForm" enctype="multipart/form-data" method="post" >						
					<div class="input-group input-group-sm">
						<span class="span-info  input-group-addon">엑셀업로드</span>
						<input type="hidden" id="excelColumnCount" name="excelColumnCount" value="25" />
						<input type="file" name="excelFile" class="form-control input-sm" id="assetManagerExcelFile" ><!-- name명 고정 -->
						<div class="input-group-btn">
							<button type="button" id="assetManagerAddExcelImportBtn" class="btn btn-default btn-sm btn-danger" ><span>업로드</span></button> 
						</div>
						
					</div>
					</form>
				</div>
        
        
  JS
  
  	function excepUpload(){ //엑셀 업로드 AJAX
		 var file = $("#assetManagerExcelFile").val();
		 if (file == "" || file == null) {
		     alert("파일을 선택해주세요.");
		     return false;
		 } else if (!checkFileType(file)) {
		     alert("엑셀 파일만 업로드 가능합니다.");
		     return false;
		 }
		
		 if (confirm("업로드 하시겠습니까?")) {
				 var form = new FormData(document.getElementById('assetManagerUploadExcelForm'));
				 
				 $.ajax({
				   url: "/ctrl/asset/asset/uploadExcelAstData", //컨트롤러 URL
					 data: form,
					 dataType: 'json',
					 processData: false,
					 contentType: false,
					 type: 'POST',
					 success: function (result) {
						 if(result.NULL_FILE == "Y"){
							 alert("엑셀파일이 없습니다.");
							 return false;
						 }else if(result.NULL_CHECK == 'Y'){
							 alert("필수입력 컬럼 ["+result.CELL_NAME + "] 의 값 중 " +result.ROW_INDEX + "행의 데이터가 비어있습니다.");
							 return false;
						 }else if(result.DUPLICATION_EXCEL_SERIAL == 'Y'){
							 alert("엑셀 데이터 ["+ result.DUP_SERIAL_ARRAY +"] 행의 시리얼번호가 중복존재합니다." );
							 return false;
						 }else if(result.DUPLICATION_DATA_CHECK == 'Y'){
							 alert("엑셀 데이터 ["+ result.STR_CD + "] 의 자산은 이미 자산 등록을 마친 점포자산입니다.");
							 return false;
						 }else if(result.DUPLICATION_SERIAL_DATA_CHECK == 'Y'){
							 alert("엑셀 데이터 ["+result.LIST+ "] 행의 시리얼은 이미 등록된 시리얼입니다.");
							 return false;

						 }
						 //업로드성공
						 alert('업로드를 완료했습니다.');
						 $assetManagerGrid.paragonGridSearch();
					 }
			    });
			};
	};//업로드끝
  
  
  SVCE
  
  
  	public Params uploadExcelAstDataCheck(HttpSession session, MultipartHttpServletRequest request, Params inParams){
		LOG.debug("AssetService uploadExcelAstDataCheck() :: " + inParams);
		List<Map<String, String>> article = new ArrayList<Map<String, String>>(); //엑셀파일 데이터를 담는 변수
		Params outParams = ParamsFactory.createOutParams(inParams);
		ExcelAssetUpload ce = null; //엑셀 업로드 로직 클래스파일
		
		Map<String, Integer> serialMap = new HashMap<String, Integer>();
		
		//DATA READ
		try{
			//엑셀업로드 파일 Data Stream 및 필수값 유효성 검사, 저장
			ce = new ExcelAssetUpload(session, request); //엑셀 업로드 로직 클래스파일
			article = ce.read();
//			LOG.debug(article);
		}catch(NullPointerException e){ //필수입력값이 NULL 일때 alert
			outParams.setParam("NULL_CHECK", "Y");
			outParams.setParam("ROW_INDEX", ce.rowIndex);
			outParams.setParam("CELL_NAME", ce.rowIndex >= 2 ? ce.columnKorNameArray.get(ce.colIndex) : (ce.colIndex + "열") );
			return outParams;
		}
		LOG.debug("엑셀 데이터간 비교");
		//엑셀파일내 유효성 검사
		//엑셀데이터 중복자산 체크
		List<Integer> list = new ArrayList<Integer>();
		for(int i = 0; i < article.size(); i++){
			//유효시리얼
			String check = article.get(i).get("AST_SERIAL");
			if(check != null && check.length() != 0) {//4가 나오지 않음
				if(serialMap.keySet().contains(check)){
//					list.add(serialMap.get(check));
					list.add(i+3);
				}else{
					serialMap.put(check, i+3);
				}
			}
		}
		if(list.size() > 0){
			outParams.setParam("DUP_SERIAL_ARRAY", list);
			outParams.setParam("DUPLICATION_EXCEL_SERIAL", "Y");
			return outParams;
		}
		LOG.debug("엑셀 DB 중복자산 비교");
		//엑셀데이터와 DB데이터 비교
		//중복자산 체크
		DataTable dbDt = new CommDataTable();
		dbDt = getSqlManager().selectDataTable("AssetService.uploadExcelDataCompare",inParams);
		for(DataRow dr : dbDt){
			String strCd = dr.getString("STR_CD");
			
			for(int i = 0; i < article.size(); i++){
				String exStrCd = article.get(i).get("STR_CD");
				
				if(strCd == null || exStrCd == null){
				}else if(strCd.equals(exStrCd)){
					outParams.setParam("DUPLICATION_DATA_CHECK", "Y");
					outParams.setParam("STR_CD", article.get(i).get("STR_CD"));
					return outParams;
				}
			}
		}
		LOG.debug("엑셀 DB 중복시리얼 비교");
		//중복 시리얼 체크
		List<Map<String, String>> serialList = new ArrayList<Map<String, String>>();
		for(String serial : serialMap.keySet()){
			Map<String, String> map = new HashMap<String, String>();
			map.put("AST_SERIAL", serial);
			serialList.add(map);
		}
		LOG.debug(serialList);
		inParams.setParam("dt_list", serialList);
		
		dbDt = getSqlManager().selectDataTable("AssetService.duplicationSerialCheck", inParams);
		if(dbDt != null){
			for(DataRow dr : dbDt){
				list.add(serialMap.get(dr.getString("AST_SERIAL")));
			}
			if(list.size() > 0){
				Collections.sort(list);
				outParams.setParam("DUPLICATION_SERIAL_DATA_CHECK", "Y");
				outParams.setParam("LIST", list);
				return outParams;
			}
		}
		//유효성검사 완료한 LIST
		long inc = System.currentTimeMillis();
		for(Map<String, String> map : article){
			String serial = map.get("AST_SERIAL");
			if(serial == null || serial.length() == 0){
				serial = "TEMP" + map.get("ASP_COMP_CD") + map.get("STR_CD") + inc++;
				map.put("AST_SERIAL", serial);
			}
		}
		
		inParams.setParam("dt_list", article);
		
		getSqlManager().insert("AssetService.insertAssetUploadExcelData", inParams); //자산 DB 입력
		
	return outParams;
	}
  
  
  SVCECTRL
  
  /**
 * Copyright (c) 2018 VertexID RND, Inc.
 * All right reserved.
 *
 * This software is the confidential and proprietary information of VertexID, Inc.
 * You shall not disclose such Confidential Information and
 * shall use it only in accordance with the terms of the license agreement
 * you entered into with VertexID.
 *
 * Revision History
 * Author              		Date       		Description
 * ------------------   --------------    ------------------
 * "Kim Jin Ho"         	2018. 1. 16. 			First Draft.
 */
package vertexid.paragon.comm.util.excelForm;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import vertexid.paragon.comm.util.ExcelReadOption;

/**
 * [설명]
 *
 * @class ExcelAssetUpload.java
 * @package vertexid.paragon.comm.util.excelForm
 * @author "Kim Jin Ho"
 * @version 1.0
 */
public class ExcelAssetUpload {
	
	private static final Log LOG = LogFactory.getLog(ExcelAssetUpload.class);
	
	//엑셀업로드/////////////////////////////////////////////////////////////////////////////////////////////////
	private ExcelReadOption excelReadOption = new ExcelReadOption();
	private Workbook wb = null;
	private Sheet sheet = null;
	
	public List<String> columnKorNameArray = new ArrayList<String>();
	private List<String> columnCodeArray = new ArrayList<String>();
	private Map<String, Integer> option = new HashMap<String, Integer>();
	private List<String> valiColList = new ArrayList<String>();

	private int sheetNum = 0;   //시트 번호
	private int numOfCells = 0;
	private int numOfRows = 0; //로우의 개수
	public int rowIndex = 0; //작업중인 행 번호
	public int colIndex = 0; //작업중인 열 번호
    
    public ExcelAssetUpload(HttpSession session, MultipartHttpServletRequest request) {
    	
        MultipartFile excelFile = request.getFile("excelFile");
		LOG.debug("===== 엑셀 업로드 시작 =====");
		
        option.put("setLoadingSheetNum", 0); //시트 번호
        option.put("getColumnForCount", 1); //시작 컬럼
        option.put("setLoadingColStCount", 0); //제목행 위치
        option.put("setLoadingContStCount", 2); //데이터행 위치
        
        //필수값체크
        valiColList.add("ASP_COMP_CD");
        valiColList.add("STR_CD");
        valiColList.add("PRD_CD");
        valiColList.add("AST_ST_NM");
        valiColList.add("AST_MFR_DT");
        valiColList.add("FREE_START_DT");
        valiColList.add("WARRANTY_DAY");
        
        //0. Path
        excelReadOption.setFilePath(session.getServletContext().getRealPath(excelFile.getOriginalFilename()));
        //1. column 값
        excelReadOption.setStartRow(option.get("setLoadingColStCount"));
            
        //엑셀 데이터 생성 (자바)
    	wb = getWorkbook(excelFile);
    	
//    	sheetNum = wb.getNumberOfSheets(); //시트의 개수를 가져오기 위한 변수 (전체시트)
    	sheetNum = option.get("setLoadingSheetNum"); //한시트일때
    	sheet = wb.getSheetAt(sheetNum);         	
    	LOG.debug("Sheet Name = "+ wb.getSheetName(sheetNum));
    	
    	//유효한 데이터가 있는 행의 개수를 가져온다.
        numOfRows = sheet.getPhysicalNumberOfRows();
    	
        //컬럼 영문명이 있는 행
        rowIndex = 0;
        Row row = sheet.getRow(rowIndex);
        
        numOfCells = row.getPhysicalNumberOfCells();
        
        for(colIndex = 0; colIndex < numOfCells; colIndex++) {
    		Cell cell = row.getCell(colIndex);
        	String cellName = cell.getStringCellValue();	//해당 컬럼의 명을 입력.
        	columnCodeArray.add(cellName);
        }
        
        //컬럼 한글명이 있는 행
        rowIndex = 1;
        row = sheet.getRow(rowIndex);
        
        numOfCells = row.getPhysicalNumberOfCells();
        
        for(colIndex = 0; colIndex < numOfCells; colIndex++) {
        	String cellName = "";
    		Cell cell = row.getCell(colIndex);
        	if(cell != null) cellName = cell.getStringCellValue();	//해당 컬럼의 명을 입력.
        	columnKorNameArray.add(cellName);
        }
		LOG.debug("===== 엑셀 업로드 초기화 완료 =====");
	}
	
	//컬럼과 데이터 조회 두 로직에서 사용됨
	public Map<String, String> readLogic(Row row) throws NullPointerException{
		Map<String, String> returnExMap = new HashMap<String, String>();
    	 
    	//COLUMN 명 입력
    	for(colIndex = 0; colIndex < numOfCells; colIndex++) {
    		Cell cell = row.getCell(colIndex);
    		String cellName = columnCodeArray.get(colIndex);
    		
    		returnExMap.put(cellName, ExcelCellRefGetValue(cell, cellName));
        }
		return returnExMap;
	}
	
    public List<Map<String, String>> read() throws NullPointerException {
        //FileType.getWorkbook() <-- 파일의 확장자에 따라서 적절하게 가져온다.
        List<Map<String, String>> result = new ArrayList<Map<String, String>>(); 

//        numOfRows = 1900;
        for(rowIndex = option.get("setLoadingContStCount"); rowIndex < numOfRows ; rowIndex++) {
//            for(int rowIndexCount = getExDataMap("setLoadingContStCount"); rowIndexCount < numOfRows ; rowIndexCount++) {
            Row row = sheet.getRow(rowIndex);
            if(row != null) {
            	LOG.debug("rowIndex = "+rowIndex);
                result.add(readLogic(row));   
            }else{
            	LOG.debug("====> ERROR rowIndex = "+rowIndex);
            }
        	LOG.debug("비교"+rowIndex);
        }
        LOG.debug(result);
        return result;       
	}      

	/** [엑셀 업로드 메서드]
	 * [설명] 엑셀파일을 읽어서 Workbook 객체에 리턴한다.
	 * [설명] XLS와 XLSX 확장자를 비교한다.
	 * 
	 * @Author "Kim Seon Ho"
	 * @Date 2017. 11. 24.
	 */
    public Workbook getWorkbook(MultipartFile excelFile) {
        
        /*
         * FileInputStream은 파일의 경로에 있는 파일을
         * 읽어서 Byte로 가져온다.
         * 
         * 파일이 존재하지 않는다면은
         * RuntimeException이 발생된다.
         */
    	String filePath = excelFile.getName();
        InputStream fis = null;
        Workbook wb = null;
        try {
			fis = excelFile.getInputStream();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	LOG.debug("EXCEL 로딩 " + filePath);
        
        /*
         * 파일의 확장자를 체크해서 .XLS 라면 HSSFWorkbook에
         * .XLSX라면 XSSFWorkbook에 각각 초기화 한다.
         */
        if(filePath.toUpperCase().endsWith(".XLS")) {
            try {
                wb = new HSSFWorkbook(fis);
            } catch (IOException e) {
            	LOG.debug(".XLS 로딩오류");
                throw new RuntimeException(e.getMessage(), e);
            }
        }
        else {
            try {
                wb = new XSSFWorkbook(fis);
            } catch (IOException e) {
            	LOG.debug(".XLSX 로딩오류");
                throw new RuntimeException(e.getMessage(), e);
            }
        }
    	LOG.debug("EXCEL 로딩완료");
        
        return wb;
        
    }
    
	/** [엑셀업로드 메서드]
     * [설명] Cell에 해당하는 Column Name을 가젼온다(A,B,C..)
     * [설명] 만약 Cell이 Null이라면 int cellIndex의 값으로
     * [설명] Column Name을 가져온다.
     * 
	 * @Author "Kim Seon Ho"
	 * @Date 2017. 11. 24.
	 */
    public String ExcelCellRefGetValue(Cell cell, String cellName) throws NullPointerException{
        String value = "";
        
        //각 쎌의 값을 가져와 Type에 따라 + '' 하여 String으로 변환, 소수점 -> 정수표현
        if(cell != null) {
        	switch(cell.getCellType()) {
        	case Cell.CELL_TYPE_NUMERIC :
        		value = (long)cell.getNumericCellValue() + "";
        		break;
        	case Cell.CELL_TYPE_BOOLEAN :
        		value = cell.getBooleanCellValue() + "";
        		break;
        	case Cell.CELL_TYPE_ERROR :
        		value = cell.getErrorCellValue() + "";
        		break;
        	case Cell.CELL_TYPE_BLANK :
        		break;
        	case Cell.CELL_TYPE_FORMULA : //수식을 그대로 가져올때
        	case Cell.CELL_TYPE_STRING :
        	default:
        		value = cell.getStringCellValue();
        		break;
        	}
        	value = value.trim();
        }
        
        if(valiColList.contains(cellName) && value.length() == 0) {
        	throw new NullPointerException();
        }
        return value;
    }
}
