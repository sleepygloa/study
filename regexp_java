java.util.regex 패키지에 있는Match 클래스와 Pattern 클래스를 이용하여 문자열을 정규검증식으로 나타낼 수 있습니다.
 
boolean flag = Pattern.matches("^[a-zA-Z0-9]*$", strInput); 
 정규표현식의 내용은 다음을 의미합니다.
 
1) ^ : 문자열의 시작
2) $ : 문자열의 종료
3) . : 임의의 한 문자 (문자의 종류와 관계없음)
4) | : or의 의미임
5) ? : 앞 문자가 없거나 하나 있을때
6) + : 앞 문자가 하나 이상임 (최소 한개 이상)
7) * : 앞 문자가 없을 수도 있고, 무한정 많을 수도 있음
8) [] : 문자 클래스의 지정, 문자의 집합이나 범위를 나태내면 - 기호를 사용한다. [] 내에서 ^를 사용하면 not의 의미임
9) {} : 횟수나 범위를 나타냄. 예를 들어 k{5}의 경우 k가 5번 반복되는 경우임, a{3,5}는 a가 3번 이상 5번 이하 반복되는 경우임
10) \w : 알파벳이나 숫자
11) \W : \w의 not. 즉 알파벳이나 숫자를 제외한 문자
12) \d : [0-9]와 동일
13) \D : 숫자를 제외한 모든 문자
 
기본적인 정규 표현식과 그 예를 모아보면 다음과 같습니다.
 
1) 숫자만 : ^[0-9]*$
2) 영문자만 : ^[a-zA-Z]*$
3) 한글만 : ^[가-힣]*$
4) 영어 & 숫자만 : ^[a-zA-Z0-9]*$
5) E-Mail : ^[a-zA-Z0-9]+@[a-zA-Z0-9]+$
6) 휴대폰 : ^01(?:0|1|[6-9]) - (?:\d{3}|\d{4}) - \d{4}$
7) 일반전화 : ^\d{2.3} - \d{3,4} - \d{4}$
8) 주민등록번호 : \d{6} \- [1-4]\d{6}
9) IP 주소 : ([0-9]{1,3}) \. ([0-9]{1,3}) \. ([0-9]{1,3}) \. ([0-9]{1,3})
 
이외에 자주 써먹는 정규식을 계속 모아야겠네요. ^^

2017년 2월 추가

최근 들어 자주 쓰게되는 정규식을 추가해 봅니다.

1) 라인 확인 : 라인에 tab이 있거나, 스페이스로 띄워져 있으나 문자열이 없는 경우 : (?m)^[ \t]*\r?\n
    (빈칸이 생성되었을 때 지울때 편합니다.)
2) 개인통관고유부호 : 맨 앞이 p로 시작하는 12자리 숫자 또는 순수하게 13자리 숫자인 경우 : ^(p|P)[0-9]{12} 또는 ^[0-9]{13} 으로 판단

2017년 7월 추가

예전에 정리해던 것인데 그 패턴에 하나 더 있어서 추가해 봅니다. 

http://blog.naver.com/admass/50177056858

HTML 태그 삭제를 위한 Java 정규식 표현
* Pattern String noHTMLString = htmlString.replaceAll("\\<.*?\\>", ""); * 예제 Strin...
blog.naver.com

HTML 삭제를 위한 패턴입니다.

* Pattern 

String noHTMLString = htmlString.replaceAll("\\<.*?\\>", "");

* 예제
 
String regex1 = "\\<.*?\\>";
String regex2 = "<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?(\\s)*(/)?>";
String html = "가<aaa>나</bbb>다<ccc/>라<한글>마<ddd >바< eee >사< img src=\"한글\" >아\n";
System.out.println(html.replaceAll(regex1, ""));
System.out.println(html.replaceAll(regex2, ""));

==== 실행결과 ======
가나다라마바사아
가나다라<한글>마바< eee >사< img src="한글" >아

그리고, () 안에 있는 정보를 변경하기 위한 패턴입니다.

* Pattern 

 "\\(.*?\\)"

* Example

String sample = "STR(sss)";

sample = sample.replaceAll("\\(.*?\\)", "(kk)");
System.out.println(sample);

* 결과

STR(kk)




###  dd ###
//작성자 확인
	@RequestMapping("passwdCheck.do")
	public ModelAndView passwdCheck(String passwd,  int minlength, int maxlength, Model model){
		String check = null;
		JSONObject jsonObj = new JSONObject();
		ModelAndView mv = new ModelAndView();
			
		
			if(passwd.length() < minlength ) {
				check = "비밀번호를4자이상으로 입력해주세요";
			}else if(passwd.length() > maxlength) {
				check = "비밀번호를 12자 이하로 입력해주세요";
			}else if(passwd.indexOf("\'") != -1){
		    	check = "\' 포함할수없습니다.";	
		    }else if(passwd.indexOf("\"") != -1){
		    	check = "\" 포함할수없습니다.";		
		    }else if(passwd.indexOf("\\") != -1){
		    	check = "\\ 포함할수없습니다.";		
		    }else if(passwd.indexOf("|") != -1){
		    	check = "| 포함할수없습니다.";		
		    }else if (checkDuplicate3Character(passwd)) {//중복된 3자 이상의 문자 또는 숫자 사용불가
				check = "중복된 3자 이상의 문자 사용불가입니다.";
			}else {}
		String stringToJson = check;
		
			try{
				jsonObj.put("passwd", stringToJson); 
			}catch(Exception e){
				e.printStackTrace();
			}
		model.addAttribute("json", jsonObj);
		
		mv.setViewName("json");
		
		return mv;
	}
	
	
	
public static boolean checkDuplicate3Character(String d) {
	int p = d.length(); //비밀번호 길이
	byte[] b = d.getBytes(); //비밀번호 byte
	for (int i = 0; i < ((p * 2) / 3); i++) {
		int b1 = b[i + 1];
		int b2 = b[i + 2];

		if ((b[i] == b1) && (b[i] == b2)) {
			return true;
		} else {
			continue;
		}
	}
	return false;
}

public static int digitCheck(String passwd) {

	int varDigit = 0;
	int varAlpha = 0;
	int varHex = 0;
	int varSum = 0;
	for (int i = 0; i < passwd.length(); i++) {
		char index = passwd.charAt(i);

		if (index >= '0' && index <= '9') {
			varDigit = 1;
		} else if ( (index >= 'a' && index <= 'z') || (index >= 'A' && index <= 'Z') ) {
			varAlpha = 1;
		} else if (index == '!' || index == '@' || index == '$'
				|| index == '%' || index == '^' || index == '&'
				|| index == '*') {
			varHex = 1;
		} 
	}

	varSum = varDigit + varAlpha + varHex;
	System.out.println("varSum : "+varSum);
	return varSum;
}



---------
function passwordCheck() {
         
 var userID = document.getElementById("userID").value;
 var password = document.getElementById("password").value;
 var newPassword1 = document.getElementById("newPassword1").value;
 var newPassword2 = document.getElementById("newPassword2").value;
 
 // 재입력 일치 여부
 if (newPassword1 != newPassword2) {
  alert("입력한 두 개의 비밀번호가 서로  일치하지 않습니다.");
  return false;
 }
  
 // 길이
 if(!/^[a-zA-Z0-9!@#$%^&*()?_~]{6,15}$/.test(newPassword1))
 { 
  alert("비밀번호는 숫자, 영문, 특수문자 조합으로 6~15자리를 사용해야 합니다."); 
  return false;
 }
 
 // 영문, 숫자, 특수문자 2종 이상 혼용
 var chk = 0;
 if(newPassword1.search(/[0-9]/g) != -1 ) chk ++;
 if(newPassword1.search(/[a-z]/ig)  != -1 ) chk ++;
 if(newPassword1.search(/[!@#$%^&*()?_~]/g)  != -1  ) chk ++;
 if(chk < 2)
 { 
  alert("비밀번호는 숫자, 영문, 특수문자를 두가지이상 혼용하여야 합니다."); 
  return false;
 }
  
 // 동일한 문자/숫자 4이상, 연속된 문자
 if(/(\w)\1\1\1/.test(newPassword1) || isContinuedValue(newPassword1))
 {
  alert("비밀번호에 4자 이상의 연속 또는 반복 문자 및 숫자를 사용하실 수 없습니다."); 
  return false;
 }
  
 // 아이디 포함 여부
 if(newPassword1.search(userID)>-1)
 {
  alert("ID가 포함된 비밀번호는 사용하실 수 없습니다."); 
  return false;
 }
 
 // 기존 비밀번호와 새 비밀번호 일치 여부
 if (password == newPassword2) {
  alert("기존 비밀본호와 새 비밀번호가 일치합니다.");
  return false;
 }
  
 alert("테스트 통과!");
  
}
function isContinuedValue(value) {
 console.log("value = " + value);
 var intCnt1 = 0;
 var intCnt2 = 0;
 var temp0 = "";
 var temp1 = "";
 var temp2 = "";
 var temp3 = "";
 for (var i = 0; i < value.length-3; i++) {
  console.log("=========================");
  temp0 = value.charAt(i);
  temp1 = value.charAt(i + 1);
  temp2 = value.charAt(i + 2);
  temp3 = value.charAt(i + 3);
  console.log(temp0)
  console.log(temp1)
  console.log(temp2)
  console.log(temp3)
  if (temp0.charCodeAt(0) - temp1.charCodeAt(0) == 1
   && temp1.charCodeAt(0) - temp2.charCodeAt(0) == 1
   && temp2.charCodeAt(0) - temp3.charCodeAt(0) == 1) {
  intCnt1 = intCnt1 + 1;
  }
  if (temp0.charCodeAt(0) - temp1.charCodeAt(0) == -1
   && temp1.charCodeAt(0) - temp2.charCodeAt(0) == -1
   && temp2.charCodeAt(0) - temp3.charCodeAt(0) == -1) {
  intCnt2 = intCnt2 + 1;
  }
  console.log("=========================");
 }
 console.log(intCnt1 > 0 || intCnt2 > 0);
 return (intCnt1 > 0 || intCnt2 > 0);
}
참조 : http://gongam100.tistory.com/24
1. 영문, 숫자 혼합하여 6~20자리 이내
function chkPwd(str){
 var reg_pwd = /^.*(?=.{6,20})(?=.*[0-9])(?=.*[a-zA-Z]).*$/;
 if(!reg_pwd.test(str)){
  return false;
 }
 return true;
}
if(!chkPwd( $.trim($('#mpassword').val()))){
 alert('비밀번호를 확인하세요.₩n(영문,숫자를 혼합하여 6~20자 이내)');   
 $('#mpassword').val('');
 $('#mpassword').focus(); return false;
}
------------------------------------------------------
2. 영문,숫자,특수문자 혼합하여 8자리~20자리 이내.(비밀번호 표준)
function chkPwd(str){
 var pw = str;
 var num = pw.search(/[0-9]/g);
 var eng = pw.search(/[a-z]/ig);
 var spe = pw.search(/[`~!@@#$%^&*|₩₩₩'₩";:₩/?]/gi);
 
 if(pw.length < 8 || pw.length > 20){
  alert("8자리 ~ 20자리 이내로 입력해주세요.");
  return false;
 }
 if(pw.search(/₩s/) != -1){
  alert("비밀번호는 공백업이 입력해주세요.");
  return false;
 } 
 if(num < 0 || eng < 0 || spe < 0 ){
  alert("영문,숫자, 특수문자를 혼합하여 입력해주세요.");
  return false;
 }
 
 return true;
}
if(!chkPwd( $.trim($('#mpassword').val()))){
   $('#mpassword').val('');
   $('#mpassword').focus();
   return false;
}
------------------------------------------------------
3. 영문,숫자,특수문자 중 2가지 혼합하여 10자리~20자리 이내.(비밀번호 표준)
function chkPwd(str){
 var pw = str;
 var num = pw.search(/[0-9]/g);
 var eng = pw.search(/[a-z]/ig);
 var spe = pw.search(/[`~!@@#$%^&*|₩₩₩'₩";:₩/?]/gi);
 if(pw.length < 10 || pw.length > 20){
  alert("10자리 ~ 20자리 이내로 입력해주세요.");
  return false;
 }
 if(pw.search(/₩s/) != -1){
  alert("비밀번호는 공백업이 입력해주세요.");
  return false;
 }
 if( (num < 0 && eng < 0) || (eng < 0 && spe < 0) || (spe < 0 && num < 0) ){
  alert("영문,숫자, 특수문자 중 2가지 이상을 혼합하여 입력해주세요.");
  return false;
 }
 return true;
}
if(!chkPwd( $.trim($('#mpassword').val()))){
 $('#mpassword').val('');
 $('#mpassword').focus();
 return false;
}


출처: http://godlvkhj.tistory.com/130 [하은양 믿음군 효실맘 호홍홍집s]


